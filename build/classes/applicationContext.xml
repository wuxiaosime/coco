<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-4.0.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.0.xsd
        ">

	<!-- Hibernate4 -->
	<!-- 加载资源文件 其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载 -->
	<!-- 加载redis配置文件 -->
	<!-- <context:property-placeholder location="classpath*:*.properties" /> -->

	<!-- 自动扫描与装配bean -->
	<context:component-scan base-package="group.salad" />

	<bean id="locationHelper" class="group.salad.util.LocationHelper">
		<property name="location" value="//D:/workspace/salad/build/classes/" />
	</bean>
	<!-- hibernate文件配置 -->
	<!-- <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"> 
		<property name="dataSource" ref="dataSource" /> <property name="packagesToScan" 
		value="group.salad" /> <property name="configLocations"> <value>classpath:hibernate.cfg.xml</value> 
		</property> <property name="hibernateProperties"> <props> <prop key="connection.driver_class">{jdbc.driverClassName}</prop> 
		<prop key="connection.url">{jdbc.url}</prop> <prop key="connection.username">{jdbc.user}</prop> 
		<prop key="connection.password">{jdbc.password}</prop> </props> </property> 
		</bean> -->
	<!-- 对数据源进行事务管理 -->
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dataSource" /> </bean> -->
	<!-- 配置Hibernate事务管理器 -->
	<!-- <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"> 
		<property name="sessionFactory" ref="sessionFactory" /> </bean> -->

	<!-- 配置事务异常封装 -->
	<!-- <bean id="persistenceExceptionTranslationPostProcessor" class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" 
		/> -->

	<!-- 数据库映射 -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" 
		destroy-method="close"> <property name="driverClass" value="${jdbc.driverClassName}" 
		/> <property name="jdbcUrl" value="${jdbc.url}" /> <property name="user" 
		value="${jdbc.user}" /> <property name="password" value="${jdbc.password}" 
		/> 连接池中保留的最小连接数。 <property name="minPoolSize" value="5" /> 连接池中保留的最大连接数。Default: 
		15 <property name="maxPoolSize" value="30" /> 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 
		3 <property name="initialPoolSize" value="10" /> 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 
		0 <property name="maxIdleTime" value="60" /> c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 
		0 <property name="maxStatements" value="100" /> <property name="maxStatementsPerConnection" 
		value="200" /> <property name="numHelperThreads" value="10" /> </bean> -->

	<!-- 声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> <tx:method name="add*" propagation="REQUIRED" /> <tx:method 
		name="get*" propagation="REQUIRED" /> <tx:method name="log*" propagation="REQUIRED" 
		/> <tx:method name="remove*" propagation="REQUIRED" /> <tx:method name="list*" 
		read-only="true" /> </tx:attributes> </tx:advice> -->
	<!-- 开启声明式容器事务注解 -->
	<!-- <tx:annotation-driven /> -->

	<!-- <aop:config expose-proxy="true"> 只对业务逻辑层实施事务 <aop:pointcut id="txPointcut" 
		expression="execution(* group.salad..*.*(..))" /> Advisor定义，切入点和通知分别为txPointcut、txAdvice 
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" /> </aop:config> -->

	<!-- 开启定时任务注解 -->
	<task:annotation-driven />

	<!-- redis 相关配置 -->

	<!-- <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"> 
		<property name="maxIdle" value="8" /> <property name="maxWaitMillis" value="1000" 
		/> <property name="testOnBorrow" value="true" /> <property name="testOnReturn" 
		value="true" /> <property name="testWhileIdle" value="true"/> </bean> <bean 
		id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool" scope="singleton"> 
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" /> <constructor-arg 
		name="shards"> <list> <bean class="redis.clients.jedis.JedisShardInfo"> <constructor-arg 
		name="host" value="${redis.host}" /> <constructor-arg name="port" value="${redis.port}" 
		/> <constructor-arg name="timeout" value="1000" /> <constructor-arg name="weight" 
		value="1" /> </bean> </list> </constructor-arg> </bean> <bean id="jedisPool" 
		class="redis.clients.jedis.JedisPool" scope="singleton"> <constructor-arg 
		name="poolConfig" ref="jedisPoolConfig" /> <constructor-arg name="host" value="${redis.host}" 
		/> </bean> -->

	<!-- <bean id="cacheSession" class="com.jiajie.cache.CacheSession" scope="singleton"> 
		<constructor-arg name="jedisPool" ref="jedisPool" /> </bean> -->
	<!-- <bean id="jdkSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" 
		/> <bean id="stringSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" 
		/> <aop:aspectj-autoproxy proxy-target-class="true" /> -->
</beans>