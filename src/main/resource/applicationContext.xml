<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-4.0.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache-4.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.0.xsd
        ">

	<!-- Hibernate4 -->
	<!-- 加载资源文件 其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载 -->
	<!-- 加载redis配置文件 -->
	<context:property-placeholder location="classpath*:*.properties" />

	<bean id="wxProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:wx-config.properties</value>
			</list>
		</property>
	</bean>
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
		<property name="properties" ref="wxProperties" />
	</bean>

	<!-- 自动扫描与装配bean -->
	<context:component-scan base-package="indi.shaw.coco" />

	<!-- <bean id="cacheManager" class="org.springframework.cache.concurrent.ConcurrentMapCacheManager"></bean> -->
	<!-- Ehcache实现 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" p:cache-manager-ref="ehcacheManager" />
	<bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" p:config-location="classpath:ehcache.xml" />
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>
	<bean id="locationHelper" class="indi.shaw.coco.util.LocationHelper">
		<property name="location" value="//D:/workspace/salad/build/classes/" />
	</bean>
	<!-- hibernate文件配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="indi.shaw.coco.model" />
		<!-- <property name="configLocations"> <value>classpath:hibernate.cfg.xml</value> </property> -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${jdbc.dialect}</prop>
				<prop key="hibernate.show_sql">${jdbc.show_sql}</prop>
				<prop key="hibernate.format_sql">${jdbc.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${jdbc.hbm2ddl.auto}</prop>
				<!-- 设置二级缓存插件EHCache的Provider类 -->
				<prop key="hibernate.cache.provider_class">
					${jdbc.cache.EhCacheProvider}
				</prop>
				<!-- 高速缓存提供程序 -->
				<prop key="hibernate.cache.region.factory_class">
					org.hibernate.cache.ehcache.EhCacheRegionFactory
				</prop>
				<!-- Hibernate4以后都封装到org.hibernate.cache.ehcache.EhCacheRegionFactory -->
				<!-- 指定缓存配置文件位置 -->
				<prop key="hibernate.cache.provider_configuration_file_resource_path">
					classpath:ehcache.xml
				</prop>
				<!-- 强制Hibernate以更人性化的格式将数据存入二级缓存 -->
				<prop key="hibernate.cache.use_structured_entries">true</prop>

				<!-- Hibernate将收集有助于性能调节的统计数据 -->
				<prop key="hibernate.generate_statistics">true</prop>
			</props>
		</property>
	</bean>
	<!-- 对数据源进行事务管理 -->
	<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> <property name="dataSource" ref="dataSource" /> </bean> -->
	<!-- 配置Hibernate事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务异常封装 -->
	<bean id="persistenceExceptionTranslationPostProcessor" class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<!-- 数据库映射 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="5" />
		<!-- 连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="20" />
		<!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="10" />
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="60" />
		<!-- c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值:0 -->
		<property name="maxStatements" value="100" />
		<property name="maxStatementsPerConnection" value="200" />
		<property name="numHelperThreads" value="10" />
	</bean>

	<!-- 配置shiro框架的过滤器工厂bean -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/user/login.do" />
		<property name="successUrl" value="" />
		<property name="unauthorizedUrl" value="/noPrivilegeUI.jsp" />
		<!-- 指定URL级别拦截策略 -->
		<property name="filterChainDefinitions">
			<value>
				/js/** = anon
				/css/** = anon
				/locales/** = anon
				/css/** = anon
				/page/** = anon
				/index.do = anon
				/user/isRelogin.do = anon
				/noPrivilegeUI.jsp* = anon
				/user/login.do = anon
				/user/dologin.do = anon
				/role/findAllRoleList = perms["角色管理"]
				/** = authc
			</value>
		</property>
	</bean>
	<!-- 配置安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="sessionManager" ref="sessionManager" />
		<property name="cacheManager" ref="shiroCacheManager" />
		<property name="realm" ref="userRealm" />
		<!--注入rememberMe cookie管理器 -->
		<property name="rememberMeManager" ref="rememberMeManager" />
	</bean>
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- session的失效时长，单位毫秒 -->
		<property name="globalSessionTimeout" value="600000" />
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true" />
	</bean>
	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!--注入自定义cookie(主要是设置寿命, 默认的一年太长) -->
		<property name="cookie" ref="rememberMeCookie" />
	</bean>
	<bean id="userRealm" class="indi.shaw.coco.security.UserRealm"></bean>
	
	<!--手动指定cookie -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<!-- <property name="httpOnly" value="true" /> -->
		<property name="maxAge" value="604800" /><!-- 7天 -->
	</bean>
	<!-- 声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" />
			<tx:method name="log*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="list*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 开启声明式容器事务注解 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	<cache:advice id="cacheAdvice" cache-manager="cacheManager"></cache:advice>
	<aop:config expose-proxy="true">
		<!-- 只对业务逻辑层实施事务 -->
		<!-- <aop:pointcut id="txPointcut" expression="target(indi.shaw.coco.service.BaseService)" /> -->
		<aop:pointcut id="txPointcut" expression="execution(* indi.shaw.coco.service..*.*(..))" />
		<aop:advisor advice-ref="cacheAdvice" pointcut="execution(* indi.shaw.coco.cache.cacheService.*.*(..))" />
		<!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
	</aop:config>

	<!-- 开启定时任务注解 -->
	<task:annotation-driven />

	<!-- 启用Spring对基于注解的Cache的支持 -->
	<cache:annotation-driven />
	<!-- redis 相关配置 -->

	<!-- <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"> <property name="maxIdle" value="8" /> <property name="maxWaitMillis" value="1000" /> <property name="testOnBorrow" value="true" 
		/> <property name="testOnReturn" value="true" /> <property name="testWhileIdle" value="true"/> </bean> <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool" scope="singleton"> <constructor-arg 
		name="poolConfig" ref="jedisPoolConfig" /> <constructor-arg name="shards"> <list> <bean class="redis.clients.jedis.JedisShardInfo"> <constructor-arg name="host" value="${redis.host}" /> <constructor-arg 
		name="port" value="${redis.port}" /> <constructor-arg name="timeout" value="1000" /> <constructor-arg name="weight" value="1" /> </bean> </list> </constructor-arg> </bean> <bean id="jedisPool" class="redis.clients.jedis.JedisPool" 
		scope="singleton"> <constructor-arg name="poolConfig" ref="jedisPoolConfig" /> <constructor-arg name="host" value="${redis.host}" /> </bean> -->

	<!-- <bean id="cacheSession" class="com.jiajie.cache.CacheSession" scope="singleton"> <constructor-arg name="jedisPool" ref="jedisPool" /> </bean> -->
	<!-- <bean id="jdkSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" /> <bean id="stringSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" 
		/> -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
</beans>